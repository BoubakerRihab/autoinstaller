---
# tasks file for aws-hypervisor
- name: get AWS access information
  set_fact:
    aws_secret_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    aws_secret_access_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

- name: include network-related tasks
  include: ec2_network.yml

- name: include security-related tasks
  include: ec2_security.yml

- name: Create deployment UUID
  set_fact:
    deployment_uuid: "{{ lookup('pipe','date +%Y%m%d%H%M')}}"

- name: Set correct AMI fact
  set_fact:
    ami_id: "{{ image_name }}"

- name: create openshift nodes
  ec2:
    aws_secret_key: "{{ aws_secret_access_key }}"
    aws_access_key: "{{ aws_secret_key_id }}"
    instance_id: "{{ item.key }}"
    group: "{{ sec_group }}"
    region: "{{ region }}"
    instance_tags:
      role: "{{ item.value.role }}"
      Name: "{{ item.key }}"
      cluster: "OiA-{{ deployment_uuid }}"
    state: present
    vpc_subnet_id: "{{ subnet_id }}"
    instance_type: "{{ flavor }}"
    key_name: "{{ ssh_key_name }}"
    wait: yes
    assign_public_ip: yes
    image: "{{ ami_id }}"
    volumes:
    - device_name: /dev/sdb
      volume_size: 20
  with_dict: "{{ instance.nodes }}"

- name: gather facts about newly created instances
  ec2_instance_facts:
    aws_secret_key: "{{ aws_secret_access_key }}"
    aws_access_key: "{{ aws_secret_key_id }}"
    region: "{{ region }}"
    filters:
      "tag:cluster": "OiA-{{ deployment_uuid }}"
      "instance-state-name": running
  register: ec2

- name: associate new elastic IPs with each of the instances
  ec2_eip:
    aws_secret_key: "{{ aws_secret_access_key }}"
    aws_access_key: "{{ aws_secret_key_id }}"
    device_id: "{{ item.instance_id }}"
    region: "{{ region }}"
    in_vpc: yes
  with_items: "{{ ec2.instances }}"
  when : create_eips

- name: Refresh facts to get EIPS
  ec2_instance_facts:
    aws_secret_key: "{{ aws_secret_access_key }}"
    aws_access_key: "{{ aws_secret_key_id }}"
    region: "{{ region }}"
    filters:
      "tag:cluster": "OiA-{{ deployment_uuid }}"
      "instance-state-name": running
  register: ec2_r
  when : create_eips

- name: create groups
  add_host:
    name: "{{ item.tags.Name }}"
    ansible_ssh_host: "{{ item.public_dns_name }}"
    ansible_ssh_port: 22
    ansible_user: "{{ cluster_user }}"
    groups: "{{ item.tags.role }},openshift"
    private_ip: "{{ item.network_interfaces[0].private_ip_address }}"
    private_hostname: "{{ item.network_interfaces[0].private_dns_name }}"
    public_ip: "{{ item.network_interfaces[0].private_ip_addresses[0].association.public_ip }}"
    public_hostname: "{{ item.network_interfaces[0].private_ip_addresses[0].association.public_dns_name }}"
  with_items: "{{ ec2_r.instances }}"

- name: wait for EC2 to get instances up and running
  pause:
    seconds: 40
