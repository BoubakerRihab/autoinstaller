---
# tasks file for openstack-hypervisor
# This creates all of the resources needed to build out an entire OCP instance on openstack-hypervisor
# including the networking, ssh-keys, etc.

- name: ensure module dependencies are installed
  become: yes
  pip:
    name: "{{ item }}"
    state: present
  with_items: "{{ ansible_deps }}"

- name: include security-related tasks
  include: os_security.yml
  when: deployment.set_up_security

- name: include networking tasks
  include: os_networking.yml
  when: deployment.set_up_network

# This requires more privileges than a regular user. If you don't have auth credentials, then you can have this created ahead of time and set `create_flavor` to false to bypass this step.
- name: create openshift-specific flavor
  os_nova_flavor:
    auth:
      auth_url: "{{ auth_creds.url }}"
      username: "{{ auth_creds.admin.username }}"
      password: "{{ auth_creds.admin.password }}"
      project_name: "{{ auth_creds.admin.project }}"
    state: present
    name: "{{ flavor.name }}"
    ram: "{{ flavor.ram }}"
    vcpus: "{{ flavor.vcpus }}"
    disk: "{{ flavor.disk }}"
  when: flavor.create

- name: create cinder volumes for data
  os_volume:
    auth:
      auth_url: "{{ auth_creds.url }}"
      username: "{{ auth_creds.username }}"
      password: "{{ auth_creds.password }}"
      project_name: "{{ auth_creds.project }}"
    state: present
    display_name: "{{ item.key }}"
    size: "{{ item.value.vol_size }}"
  with_dict: "{{ instance.nodes }}"

- name: create cinder voluems for CNS
  os_volume:
    auth:
      auth_url: "{{ auth_creds.url }}"
      username: "{{ auth_creds.username }}"
      password: "{{ auth_creds.password }}"
      project_name: "{{ auth_creds.project }}"
    state: present
    display_name: "{{ item.key }}-cns"
    size: "{{ item.value.cns_vol_size }}"
  with_dict: "{{ instance.nodes }}"
  when: deployment.set_up_cns and item.value.cns_node

- name: create openshift nodes
  os_server:
    auth:
      auth_url: "{{ auth_creds.url }}"
      username: "{{ auth_creds.username }}"
      password: "{{ auth_creds.password }}"
      project_name: "{{ auth_creds.project }}"
    state: present
    flavor: "{{ flavor.name }}"
    image: "{{ item.value.openstack_params.image_id }}"
    key_name: "{{ instance.ssh_key.name }}"
    network: "{{ item.value.openstack_params.private_network }}"
    name: "{{ item.key }}"
    auto_ip: yes
    security_groups: "{{ security_group.name }}"
    meta: "role={{ item.value.role }},vol_dev={{ item.value.vol_dev }},docker_vg={{ item.value.docker_vg }},cns_role={{ item.value.cns_node }}"
  with_dict: "{{ instance.nodes }}"

- name: attach data volumes to servers
  os_server_volume:
    auth:
      auth_url: "{{ auth_creds.url }}"
      username: "{{ auth_creds.username }}"
      password: "{{ auth_creds.password }}"
      project_name: "{{ auth_creds.project }}"
    state: present
    server: "{{ item.key }}"
    volume: "{{ item.key }}"
    device: "{{ item.value.vol_dev }}"
  with_dict: "{{ instance.nodes }}"

- name: attach storage volumes to servers
  os_server_volume:
    auth:
      auth_url: "{{ auth_creds.url }}"
      username: "{{ auth_creds.username }}"
      password: "{{ auth_creds.password }}"
      project_name: "{{ auth_creds.project }}"
    state: present
    server: "{{ item.key }}"
    volume: "{{ item.key }}-cns"
    device: "{{ item.value.cns_vol_dev }}"
  with_dict: "{{ instance.nodes }}"
  when: deployment.set_up_cns and item.value.cns_node

- name: gather openstack facts
  os_server_facts:
    auth:
      auth_url: "{{ auth_creds.url }}"
      username: "{{ auth_creds.username }}"
      password: "{{ auth_creds.password }}"
      project_name: "{{ auth_creds.project }}"
    server: ocp*

# - name: debug openstack facts
#   debug:
#     var: openstack_servers

- name: create groups
  add_host:
    name: "{{ item.name }}"
    ansible_ssh_host: "{{ item.public_v4 }}"
    ansible_ssh_port: 22
    ansible_user: "{{ instance.username }}"
    groups: "{{ item.metadata.role }},openshift"
    private_ip: "{{ item.private_v4 }}"
    private_hostname: "{{ item.name }}.{{ item.private_v4}}.nip.io"
    public_ip: "{{ item.public_v4 }}"
    public_hostname: "{{ item.name }}.{{ item.public_v4 }}.nip.io"
    docker_vg: "{{ item.metadata.docker_vg }}"
    vol_dev: "{{ item.metadata.vol_dev }}"
  with_items: "{{ openstack_servers }}"

- name: create groups
  add_host:
    name: "{{ item.name }}"
    ansible_ssh_host: "{{ item.public_v4 }}"
    ansible_user: "{{ instance.username }}"
    ansible_ssh_port: 22
    groups: gluster
  with_items: "{{ openstack_servers }}"
  when: item.cns_role

- name: wait 30 seconds for vms to finish coming up
  pause:
    seconds: 30
